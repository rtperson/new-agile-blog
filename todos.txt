=====================
The New Agile Blog
=====================

Minimum marketable features:
- Blog Pages that render Markdown
- A content management system for storing a list of blog entries
- Additional content pages
- Comments
- A contact me page

User Stories:
* a "hello world" server
* a "hello world" client
* support multiple browsers
* An "about me" page
- Layout for front page


Engineering Tasks:
- Integrate JS and HTML template so that you don't need static JS files (not particularly testable)
    - look at tutorial about how to build MVC in Express
- Break out stopping server as its own Jake task


Current tasks:



Grunt or Gulp or Jake or NPM
=============================================
- NPM is all the rage right now for a build tool, but for me it has the following drawbacks:
    - Practically impossible to build in dependencies on other tasks. Copy-paste hell takes a lot of work to avoid, unless
     you `task_1 && task_2` all over the place. It's simply going to be too easy to forget that task_42 also needs task_21 down the road.
      (this is somewhat alleviated by pre- and post- scripts, but it's nowhere near robust enough for my tastes.)
    - No possibility of putting comments into JSON, which means your configuration will never be self-documenting
    - Too inflexible.
- Grunt has the following drawbacks
    - Real danger of over-dependency on plugins written by someone else (one of my goals is to gain a deep understanding myself of the underlying technologies)
    - Plugin quality is uneven
    + wide adoption in industry
    - Bottom line: I may just build all my own tasks in Grunt if I'm obliged to use it.
- Jake has the following pros and cons
    - it has very low adoption in the industry
    - using ESLint in conjunction with Jake seems to require writing your own reporter
    + TypeScript support is being worked on, and may be available in a future release.
    + That said, Jake seems to carry less cruft with it on install.

- Gulp just seems like a mess. Nobody who has used it extensively likes it.

A bit about build tool choice:
- James Shore recommends the four following properties in a build tool
    - Self documentation
    - Command-line processing
    - Dependency resolution
    - Code, not configuration


One thing about Shore's Javascript advice:
    - his linting task requires the user to build a reporter from scratch. This makes it very difficult to use another
    linting tool (like eslint)

Be careful with WebStorm's built-in bash terminal. Run your builds outside of WebStorm.
Fixed my issues by adding a shell script for Ubuntu and a batch script for Windows.

Jake seems wonky with async testing. Having to include --forceExit on the command line feels sloppy to me.
Also, will our new server code actually work from the command line, or do we need to export a default function to run it?
    - probably the latter.

Experience so far:
    - I like Typescript a lot. Haven't found much to complain about.
    - I love enforcing lint rules up front. Code is much cleaner, and the Prettier layout keeps things very clean
    - Using TDD has forced me to solve problems one at a time. It's much slower at this point

My life is a hollow lie:
    - I tried moving my HTML files, and realized that every single one of my express tests is passing when they
    should fail. FML. My big discovery today is that all the work I did getting ExpressJS working in Typescript
    was a big waste of time and will need to be entirely redone.
    - Lesson learned: get Express working in Node before you let a framework like Supertest jerk you around.
    - Possible culprits: Jest, Supertest, Promises, async...
    - either way, it's back to the drawing board with all my server code. Nice.

Karma or Cypress?
    Problems with Karma so far:
    - difficult to redirect Karma server output to Jake
    - need to mock entire DOM in order to test client-side DOM manipulation

    At the end of the day, I feel like I'm spending an inordinate amount of my development time wrestling with Karma.
    Ideally, I'd like to spend that time on the problem domain, not wrestling with tooling.
    I don't know enough about Cypress to know how it solves these problems, but I'd like to experiment with it
    to see if it's easier to work with.

    Now that I've tried Cypress, I'm not sure I'm not going to have similar issues with it. Especially getting it
    working under TypeScript. A lot of Jest/Cypress interop issues, and a weird bug that seems to be the sort of library
    error that I'd rather not have to deal with. I do have an example project that works fine with both, and I spent
    a chunk of tonight comparing the two projects, but I can't see where my error is coming from. I've isolated behaviors
    wherever possible.

    One good thing I did was to turn on linting for my tests as well. That uncovered a lot of issues.

    I'm hitting the goddamn easy button for once. No TS is Cypress tests. Too much of a headache for little benefit.

    That was easy. I now have Cypress integrated into my project. And I managed to get it testing browsers in turn. Woohoo!


    Engineering problem so far:
        - Creating a controller so I can bundle HTML/JS/images together rather than having to define a million static links
          between them.

